import numpy as np
def exercise1():
print("\n=== Exercise 1: Arrays in Financial Analytics ===")
# 1. Create a 2D array for transaction volumes
transaction_volumes = np.array([
    [150, 200, 180, 220, 190, 210],  # Branch 1
    [170, 160, 195, 185, 175, 205],  # Branch 2
    [140, 180, 220, 160, 200, 190],  # Branch 3
    [210, 190, 170, 230, 180, 220]   # Branch 4
])

print("1. Transaction Volumes Array:")
print(transaction_volumes)

# 2. Calculate total transactions per branch
total_per_branch = np.sum(transaction_volumes, axis=1)
print("\n2. Total transactions per branch:", total_per_branch)

# 3. Identify branch with highest total transactions
highest_branch = np.argmax(total_per_branch) + 1  # +1 for 1-based indexing
print(f"3. Branch with highest transactions: Branch {highest_branch}")

# 4. Compute average monthly transaction volume
average_monthly = np.mean(transaction_volumes)
print(f"4. Average monthly transaction volume: {average_monthly:.2f}")

# 5. Reshape the array to 3x8
reshaped_array = transaction_volumes.reshape(3, 8)
print("\n5. Reshaped array (3x8):")
print(reshaped_array)
print("Implications: Reshaping to 3x8 changes the structure from 4 branches over 6 months")
print("to 3 branches over 8 months, which doesn't match the original data context.")
print("This could lead to misinterpretation of the data.")
def exercise2():
print("\n=== Exercise 2:Lists in Logistic Management===")
# 1. Create a list of delivery routes
delivery_routes = [
    "North Express", "South Central", "East Coast", "West Valley",
    "Northwest Passage", "Midwest Hub", "Northeast Corridor",
    "Southern Route", "Central Expressway", "Pacific Highway"
]
print("1. Delivery Routes:", delivery_routes)

# 2. Append new route and remove discontinued one
delivery_routes.append("Mountain Pass")
delivery_routes.remove("South Central")
print("\n2. After adding and removing routes:", delivery_routes)

# 3. Sort alphabetically and reverse
delivery_routes.sort()
print("\n3. Sorted alphabetically:", delivery_routes)
delivery_routes.reverse()
print("   Reversed:", delivery_routes)

# 4. Count routes starting with "N"
routes_with_n = sum(1 for route in delivery_routes if route.startswith('N'))
print(f"\n4. Routes starting with 'N': {routes_with_n}")

# 5. List comprehension for routes longer than 10 characters
long_routes = [route for route in delivery_routes if len(route) > 10]
print("\n5. Routes longer than 10 characters:",
long_routes)
def exercise3():
print("\n===Exercise 3: Tuples in Medical Records ===")
# 1. Create a patient tuple
patient1 = ("John Doe", 45, "120/80", 72)
print("1. Patient tuple:", patient1)

# 2. Access and print age and heart rate
age = patient1[1]
heart_rate = patient1[3]
print(f"\n2. Patient Age: {age}, Heart Rate: {heart_rate} bpm")

# 3. Explain why tuples are suitable
print("\n3. Tuples are suitable for patient vitals because:")
print("   - They are immutable, preventing accidental modification of critical medical data")
print("   - They ensure data integrity for patient records")
print("   - They provide a fixed structure for consistent data storage")

# 4. Convert to list, update, and convert back
patient_list = list(patient1)
patient_list[3] = 68  # Update heart rate
updated_patient = tuple(patient_list)
print(f"\n4. Updated patient tuple: {updated_patient}")

# 5. Create tuple of 5 patients and extract names
patients = (
    ("John Doe", 45, "120/80", 72),
    ("Jane Smith", 32, "110/70", 65),
    ("Bob Johnson", 58, "130/85", 80),
    ("Alice Brown", 29, "115/75", 70),
    ("Charlie Wilson", 67, "140/90", 75)
)

patient_names = [patient[0] for patient in patients]
print(f"\n5. All patient names: {patient_names}")
def exercise4():
print("\n===Exercise 4: Dictionaries in E- commerce===")
# 1. Create product inventory dictionary
inventory = {
    "Laptop": 15,
    "Smartphone": 8,
    "Headphones": 25,
    "Tablet": 5,
    "Monitor": 12
}
print("1. Product Inventory:", inventory)

# 2. Add new product and update existing one
inventory["Keyboard"] = 18
inventory["Smartphone"] = 20
print("\n2. Updated inventory:", inventory)

# 3. Function to return low stock products
def get_low_stock_products(inventory_dict, threshold=10):
    return {product: quantity for product, quantity in inventory_dict.items() 
            if quantity < threshold}

low_stock = get_low_stock_products(inventory)
print(f"\n3. Low stock products (less than 10): {low_stock}")

# 4. Delete discontinued product
del inventory["Headphones"]
print("\n4. After deleting Headphones:", inventory)

# 5. Loop through items using .items()
print("\n5. Current Inventory:")
for product, quantity in inventory.items():
    print(f"   {product}: {quantity} in stock")
